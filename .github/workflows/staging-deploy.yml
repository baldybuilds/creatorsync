name: Deploy to Staging (QA Environment)

on:
  push:
    branches: [staging]
  pull_request:
    branches: [staging]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.x"

      - name: Run backend tests
        working-directory: ./backend
        run: |
          go mod download
          go test ./... -v

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      
      - name: Run frontend linting
        run: cd frontend && npm run lint
      
      - name: Build frontend
        run: cd frontend && npm run build
        env:
          NEXT_PUBLIC_APP_ENV: staging
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY_PRODUCTION }}
          NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
          NEXT_PUBLIC_POSTHOG_HOST: ${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}

  deploy-backend-staging:
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.x"

      - name: Build backend
        working-directory: ./backend
        run: |
          go mod download
          go build -o creatorsync ./cmd/api

      - name: Deploy to Railway (Staging QA)
        run: |
          echo "ðŸš€ Deploying backend to Railway staging QA environment..."
          echo "ðŸ“Š Staging now uses production database for true QA testing"
          echo "ðŸ”’ Staging uses production Clerk environment for user authentication"
          # Railway deployment commands would go here
          # The staging service should be configured with:
          # - PRODUCTION Clerk keys for user auth
          # - PRODUCTION database connection for data access
          # - Different app hostname (api-dev.creatorsync.app)
          # Example: railway deploy --service=creatorsync-api-staging

  deploy-frontend-staging:
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        run: cd frontend && npm ci
      
      - name: Build for staging QA
        run: cd frontend && npm run build
        env:
          NEXT_PUBLIC_APP_ENV: staging
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY_PRODUCTION }}
          NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
          NEXT_PUBLIC_POSTHOG_HOST: ${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
      
      - name: Deploy to Vercel (Staging QA)
        run: |
          echo "ðŸš€ Deploying frontend to Vercel staging QA environment..."
          echo "ðŸ”’ Staging frontend now uses production Clerk for authentication"
          echo "ðŸ“Š This creates a true production mirror for QA testing"
          # Vercel deployment commands would go here
          # The staging project should be configured with production Clerk keys
          # Example: vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} --scope staging
